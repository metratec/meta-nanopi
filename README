This is a BSP layer for NanoPi devices based on friedlyarm's OpenWRT fork
([FriendlyWrt](http://wiki.friendlyarm.com/wiki/index.php/How_to_Build_FriendlyWrt)).

Since this is a metraTec-internal layer, you may also add machine definitions
for products based on the NanoPi if necessary.

The following devices are currently supported:

* [NanoPi Neo Core](http://wiki.friendlyarm.com/wiki/index.php/NanoPi_NEO_Core)
* [NanoPi NEO2](http://wiki.friendlyarm.com/wiki/index.php/NanoPi_NEO2) **(untested!)**

There are other Yocto layers that may support FriendyARM-based devices.
They are sometimes useful for porting recipes:

* There is a generic layer for Allwinder Hx processors
  ([meta-allwinder-hx](https://gitlab.com/dimtass/meta-allwinner-hx)), but it only
  supports mainline kernels and U-Boot.
* There is also the [meta-sunxi](https://github.com/linux-sunxi/meta-sunxi) layer.

Dependencies
============

This layer depends on:

  URI: git://git.openembedded.org/bitbake
  branch: thud

  URI: git://git.openembedded.org/openembedded-core
  layers: meta
  branch: thud



Table of Contents
=================

  I. Building the meta-nanopi BSP layer
 II. Booting the images in /binary


I. Building the meta-nanopi BSP layer
========================================

--- replace with specific instructions for your layer ---

In order to build an image with BSP support for a given release, you
need to download the corresponding BSP tarball from the 'Board Support
Package (BSP) Downloads' page of the Yocto Project website.

Having done that, and assuming you extracted the BSP tarball contents
at the top-level of your yocto build tree, you can build a
nanopi image by adding the location of the meta-nanopi
layer to bblayers.conf, along with any other layers needed (to access
common metadata shared between BSPs) e.g.:

  yocto/meta-xxxx \
  yocto/meta-xxxx/meta-nanopi \

To enable the nanopi layer, add the nanopi-neo2 or nanopi-neo-core
MACHINE to local.conf:

  MACHINE ?= "nanopi-neo-core"

You should then be able to build a nanopi image as such:

  $ source oe-init-build-env
  $ bitbake core-image-sato

At the end of a successful build, you should have a live image that
you can boot from a USB flash drive (see instructions on how to do
that below, in the section 'Booting the images from /binary').

As an alternative to downloading the BSP tarball, you can also work
directly from the meta-xxxx git repository.  For each BSP in the
'meta-xxxx' repository, there are multiple branches, one corresponding
to each major release starting with 'laverne' (0.90), in addition to
the latest code which tracks the current master (note that not all
BSPs are present in every release).  Instead of extracting a BSP
tarball at the top level of your yocto build tree, you can
equivalently check out the appropriate branch from the meta-xxxx
repository at the same location.
